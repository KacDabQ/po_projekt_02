### Get all

GET http://127.0.0.1:5000/users

### Get one

GET http://127.0.0.1:5000/users/1

### Get one non existing return 404

GET http://127.0.0.1:5000/users/1000

### Create new user with missing first name returns 400

POST http://127.0.0.1:5000/users HTTP/1.1
content-type: application/json

{
    "lastname": "Dabrowski"
}

### Create new user

POST http://127.0.0.1:5000/users HTTP/1.1
content-type: application/json

{
    "name": "Kacper",
    "lastname": "Dabrowski"
}

### Patch not existing user returns 404

PATCH http://127.0.0.1:5000/users/12346 HTTP/1.1
content-type: application/json

{
    "lastname": "Mickiewicz",
    "name": "Adam Wieszcz"
}

### Patch existing user with all props

PATCH http://127.0.0.1:5000/users/2 HTTP/1.1
content-type: application/json

{
    "lastname": "Slowacki",
    "name": "Juliusz"
}

### Patch existing user with one props

PATCH http://127.0.0.1:5000/users/2 HTTP/1.1
content-type: application/json

{
    "name": "Ferdynand"
}

### Put not existing user ... sets id

PUT http://127.0.0.1:5000/users/100 HTTP/1.1
content-type: application/json

{
    "lastname": "Mickiewicz",
    "name": "Adam Wieszcz"
}

### Put existing user with all data

PUT http://127.0.0.1:5000/users/2 HTTP/1.1
content-type: application/json

{
    "name": "Adam Updated",
    "lastname": "Slowacki"
}

### Put existing user but not full data

PUT http://127.0.0.1:5000/users/2 HTTP/1.1
content-type: application/json

{
    "name": "Adam Updated"
}

### Delete user

DELETE http://127.0.0.1:5000/users/2 HTTP/1.1
content-type: application/json

### Delete not found user

DELETE http://127.0.0.1:5000/users/200 HTTP/1.1
content-type: application/json